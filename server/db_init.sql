-- Use this file to initialize the PostGreSQL database only once, before starting the server for the first time.

-- Create the database
CREATE DATABASE "feelsifyDB"
    WITH
    OWNER = postgres
    TEMPLATE = template0
    ENCODING = 'UTF8'
    LC_COLLATE = 'en_US.UTF-8'
    LC_CTYPE = 'en_US.UTF-8'
    TABLESPACE = pg_default
    CONNECTION LIMIT = -1
    IS_TEMPLATE = False;

COMMENT ON DATABASE "feelsifyDB"
    IS 'The database for the Feelsify Mental health tracker app';

-- Connect to the newly created database as current user
\c feelsifyDB

-- Grant full permissions on the database

GRANT ALL PRIVILEGES ON ALL TABLES    IN SCHEMA public to postgres;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public to postgres;
GRANT ALL PRIVILEGES ON ALL FUNCTIONS IN SCHEMA public to postgres;

-- Drop tables first in case something is wrong
DROP TABLE IF EXISTS user_metadata;
DROP TABLE IF EXISTS user_info;
DROP TABLE IF EXISTS entry_events;
DROP TABLE IF EXISTS entry_info;
DROP TABLE IF EXISTS entries;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS user_sessions;

-- Create the tables
-- some column names have table name in front of them to prevent using SQL keywords
-- For a list of SQL keywords see: https://www.postgresql.org/docs/current/sql-keywords-appendix.html
-- UUIDs are generated by the server, not in PSQL.
CREATE TABLE IF NOT EXISTS users(
    user_id         UUID PRIMARY KEY,
    username        VARCHAR(25) UNIQUE NOT NULL,
    email           VARCHAR(50) UNIQUE NOT NULL,
    user_password   CHAR(60) NOT NULL
);

-- One to one relationship with table users
CREATE TABLE IF NOT EXISTS user_info(
    user_id         UUID REFERENCES users(user_id) ON DELETE CASCADE UNIQUE NOT NULL,           
    full_name       VARCHAR(35) NOT NULL,
    age             SMALLINT NOT NULL 
        CHECK(age >= 6 AND age < 125),
    PRIMARY KEY (user_id)
);

-- One to one relationship with table users
CREATE TABLE IF NOT EXISTS user_metadata(
    user_id         UUID REFERENCES users(user_id) ON DELETE CASCADE UNIQUE NOT NULL,           
    last_login_date DATE NOT NULL,
    account_creation_date DATE NOT NULL,
    PRIMARY KEY (user_id)
);

-- Create indexes for faster querying on usernames (the primary way to retrieve data)
CREATE INDEX users_username_idx ON users (username);
CREATE INDEX users_email_idx ON users (email);

-- One to many relationship with table users
CREATE TABLE IF NOT EXISTS entries(
    entry_id        UUID UNIQUE NOT NULL,
    user_id         UUID REFERENCES users(user_id) ON DELETE CASCADE,
    entry_date      DATE NOT NULL,
    PRIMARY KEY (entry_id, user_id)
);

-- One to one relationship with table entries
CREATE TABLE IF NOT EXISTS entry_info(
    entry_id        UUID REFERENCES entries(entry_id) ON DELETE CASCADE UNIQUE NOT NULL,
    entry_type      VARCHAR(10) NOT NULL 
        CHECK(entry_type IN ('stress', 'anxiety', 'depression')),
    entry_level     SMALLINT NOT NULL
        CHECK(entry_level >= 0 AND entry_level <= 10),
    note            TEXT,
    PRIMARY KEY (entry_id)
);

-- One to many relationship with table entries
CREATE TABLE IF NOT EXISTS entry_events(
    entry_id        UUID REFERENCES entries(entry_id) ON DELETE CASCADE,
    entry_event     VARCHAR(12) NOT NULL
        CHECK(entry_event IN ('family', 'relationship', 'work', 'significant', 'trauma', 'unknown'))
);

-- used for storing the user-sessions. DO NOT EDIT THIS TABLE. This connects to Express middleware
CREATE TABLE IF NOT EXISTS user_sessions (
    sid     varchar NOT NULL COLLATE "default",
    sess    json NOT NULL,
    expire  timestamp(6) NOT NULL
)
WITH (OIDS=FALSE);

ALTER TABLE user_sessions ADD CONSTRAINT user_sessions_pkey PRIMARY KEY (sid) NOT DEFERRABLE INITIALLY IMMEDIATE;

CREATE INDEX IDX_session_expire ON user_sessions (expire);

-- ++++++++++++++++++++++DATA INSERTIONS+++++++++++++++++++++++++++++++++++++++++++

-- create a test user
-- unhashed password = test
INSERT INTO users(user_id, username, email, user_password)
VALUES (
    uuid('dd4089df-8989-4c8c-aee0-2e5c7ccd4f5a'),
    'test123',
    'test123@example.com',
    '$2b$10$VzQhCKrOjYr.KSLQYfLB0.CnP3.SkCd/eN37xyvtdJmaTHalK.Bi6'
);

INSERT INTO user_info(user_id, full_name, age)
VALUES(
    uuid('dd4089df-8989-4c8c-aee0-2e5c7ccd4f5a'),
    'Test User',
    18
);

INSERT INTO user_metadata(user_id, last_login_date, account_creation_date)
VALUES(
    uuid('dd4089df-8989-4c8c-aee0-2e5c7ccd4f5a'),
    TO_DATE('2022-10-16', 'YYYY-MM-DD'),
    TO_DATE('2022-10-09', 'YYYY-MM-DD')
);

-- create entries for the test user
-- create first entry of first user
INSERT INTO entries(entry_id, user_id, entry_date)
VALUES(
    uuid('3f336097-52f7-4520-8dd9-5d34b0a8c2ea'),
    uuid('dd4089df-8989-4c8c-aee0-2e5c7ccd4f5a'),
    TO_DATE('2022-10-10', 'YYYY-MM-DD')
);

INSERT INTO entry_info(entry_id, entry_type, entry_level, note)
VALUES(
    uuid('3f336097-52f7-4520-8dd9-5d34b0a8c2ea'),
    'depression',
    6,
    'I am sick of always being a test user.'
);

INSERT INTO entry_events(entry_id, entry_event)
VALUES(
    uuid('3f336097-52f7-4520-8dd9-5d34b0a8c2ea'),
    'trauma'
);

-- create second entry of first user
INSERT INTO entries(entry_id, user_id, entry_date)
VALUES(
    uuid('edc677aa-47ad-4d90-8655-231c30dba523'),
    uuid('dd4089df-8989-4c8c-aee0-2e5c7ccd4f5a'),
    TO_DATE('2022-10-11', 'YYYY-MM-DD')
);

INSERT INTO entry_info(entry_id, entry_type, entry_level, note)
VALUES(
    uuid('edc677aa-47ad-4d90-8655-231c30dba523'),
    'stress',
    9,
    'Another day, another test.'
);

INSERT INTO entry_events(entry_id, entry_event)
VALUES(
    uuid('edc677aa-47ad-4d90-8655-231c30dba523'),
    'significant'
);

-- create third entry of first user
INSERT INTO entries(entry_id, user_id, entry_date)
VALUES(
    uuid('834fe32e-f41a-463e-854f-16cda173961c'),
    uuid('dd4089df-8989-4c8c-aee0-2e5c7ccd4f5a'),
    TO_DATE('2022-10-12', 'YYYY-MM-DD')
);

INSERT INTO entry_info(entry_id, entry_type, entry_level, note)
VALUES(
    uuid('834fe32e-f41a-463e-854f-16cda173961c'),
    'anxiety',
    2,
    'I hope this test goes well.'
);

INSERT INTO entry_events(entry_id, entry_event)
VALUES(
    uuid('834fe32e-f41a-463e-854f-16cda173961c'),
    'significant'
);

INSERT INTO entry_events(entry_id, entry_event)
VALUES(
    uuid('834fe32e-f41a-463e-854f-16cda173961c'),
    'work'
);

-- create a secondery test user
-- unhashed password = lol
INSERT INTO users(user_id, username, email, user_password)
VALUES (
    uuid('36a296b7-ef07-46ff-9ecb-81eedd5612ee'),
    'lolcat',
    'lolcat@example.com',
    '$2b$10$/fE4VNRBFa2sVnaGCgyDkuXad88W0xHTmcuvC4UhpEeahajqrftbm'
);

INSERT INTO user_info(user_id, full_name, age)
VALUES(
    uuid('36a296b7-ef07-46ff-9ecb-81eedd5612ee'),
    'Second Test User LOL CAT',
    55
);

INSERT INTO user_metadata(user_id, last_login_date, account_creation_date)
VALUES(
    uuid('36a296b7-ef07-46ff-9ecb-81eedd5612ee'),
    TO_DATE('2022-10-16', 'YYYY-MM-DD'),
    TO_DATE('2022-10-11', 'YYYY-MM-DD')
);

-- create first entry of second user
INSERT INTO entries(entry_id, user_id, entry_date)
VALUES(
    uuid('af1e742a-fd5d-4e91-8514-376a3ef65f24'),
    uuid('36a296b7-ef07-46ff-9ecb-81eedd5612ee'),
    TO_DATE('2022-10-14', 'YYYY-MM-DD')
);

INSERT INTO entry_info(entry_id, entry_type, entry_level, note)
VALUES(
    uuid('af1e742a-fd5d-4e91-8514-376a3ef65f24'),
    'stress',
    8,
    'Trying to catch a mouse'
);

INSERT INTO entry_events(entry_id, entry_event)
VALUES(
    uuid('af1e742a-fd5d-4e91-8514-376a3ef65f24'),
    'work'
);

-- Check the data

SELECT *
FROM users;

SELECT *
FROM user_info;

SELECT * 
FROM user_metadata;

SELECT *
FROM entries;

SELECT *
FROM entry_info;

SELECT *
FROM entry_events;

